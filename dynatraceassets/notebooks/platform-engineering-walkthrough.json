{"version":"5","defaultTimeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-12-13T09:26:06.391Z"},"to":{"type":"expression","normalized":"now","date":"2023-12-13T09:56:06.391Z"}}},"sections":[{"id":"a1e71d57-04bf-44be-bfe4-624e1c8f79dc","type":"markdown","markdown":"# Welcome to our Platform Engineering on K8s HOTDAY (Prep - Jan 2024)\n\nThis Notebook is your step-by-step guide through our hands-on exercises.\n\n**Want to share something with others?**\nShare with Dynatrace Group `Perform 2024 HOT Dynatrace Guide for Successful Platform Eng on K8s vpa60071`\n\n---\n\n## BEFORE WE START: Create a Copy of this Notebook\nNotebooks are a great way to collaborate, to take notes and to explore. As this is a read-only Notebook please do the following\n1. Create a COPY of this Notebook so you can make your own notes\n2. At the end of the training DOWNLOAD your copy of the Notebook and e.g: Import in your own Dynatrace Tenant\n\n## LINKS YOU NEED TO KNOW\nHere is a list of environments and all usernames / passwords we are using today. \n\n**CAUTION**: These are all user accounts with full privileges. DO NOT DELETE THINGS UNLESS WE TELL YOU :-)\n\n| Environment | Username | Password \n --- | --- | ---\n [Dynatrace](https://vpa60071.sprint.apps.dynatracelabs.com/) | (from DTU) | (from DTU)\n [Backstage](https://backstage.dtulab707055379.dynatrace.training/) | (none) | (none)\n [ArgoCD](https://argo.dtulab707055379.dynatrace.training) | admin | `dzneLbmvml5XmogU`\n [GitLab](https://gitlab.dtulab707055379.dynatrace.training) | root | `QtuTkZlyAysyVO8JBRvuU2wT3QJvdtDCWcZBT0A4YSjpivwn42S4A37fHe36myrM`\n [Notifications (part of Backstage)](https://backstage.dtulab707055379.dynatrace.training//notifications) | | \n \n**Links to external resources**\nMost resource are public on [Our Lab repository on GitLab](https://github.com/dynatrace-perfclinics/platform-engineering-tutorial)\n\n---"},{"id":"5e4764be-a849-42d7-91a5-5d26078cf5d6","type":"markdown","markdown":"## YOUR NOTES GO HERE!!"},{"id":"1b7a5938-9e1e-44f0-96f6-227b89c73199","type":"markdown","markdown":"## Hands-On 1: Explore the Platform we have built for you\n\nThe following shows the IPD (Internal Development Platform), how it was built and how it will work:\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/platform_setup_animation_animated.gif)\n\n### 1.1 Observability: Dynatrace, OpenTelemetry & Keptn \n\n#### 1.1.1 Dynatrace: Our Observability, Security & Automation Platform Capability\n\nLets explore our Dynatrace setup!\n\nThe Dynatrace Operator was rolled out by ArgoCD as part of the initial IDP setup. This allows Dynatrace to \n* **MONITOR** our whole K8s cluster through the K8s APIs (See Kubernetes App)\n* **OBSERVE** all workloads through OneAgent (See Kubernetes Workloads)\n* **INGEST** *logs and events* from all K8s components (See Logs sections in K8s)\n* **INGEST** OpenTelemetry data from the OTel collector (See Traces)\n* **SCRAPE** Prometheus metrics via the deployed ActiveGate (See Metrics)\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/dynatrace_overview.png)\n\nPlease follow the instructor and explore some of the core screens in Dynatrace such as the Kubernetes App, Kubernetes Workloads or the Platform Observability Dashboard!\n\nWhat you should have learned:\n* How Dynatrace was deployed on this IDP\n* How to find K8s workload observability data\n* How to find lots created by different IDP components\n* Which core dashboards we have\n\n#### 1.1.2 OpenTelemetry: Ingesting all observability data in cloud native!\n\nTo learn more about OpenTelemetry go to [OpenTelemetry homepage](https://opentelemetry.io/) and get more hands-on from [IsItObservable](https://isitobservable.io/open-telemetry)\n\nIn our IDP we have an OpenTelemetry Collector that sends collected observability data to Dynatrace's OTLP endpoint. In our default setup we mainly collect OpenTelemetry traces from tools like ArgoCD, GitLab and Keptn. If we would deploy any apps that create any OpenTelemetry signals this data could automatically be collected and sent to Dynatrace as well.\n\nThose traces can then for instanced be analyzed in our **Dynatrace Distributed Traces app**\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/platform_overview_otel_argocd.png)\n\nFor reference. It literally only takes a handful of config files in the OpenTelemetry Collector ConfigMap to send data to Dynatrace:\n```\n    exporters:\n      debug: {}\n      logging: {}\n      otlphttp:\n        endpoint: $DT_URL/api/v2/otlp\n        headers:\n          Authorization: Api-Token $DT_OTEL_ALL_INGEST_TOKEN\n```\n\nWhat you should have learned:\n* That OpenTelemetry is a standard component available in our IDP\n* How easy it is to send OpenTelemetry data to Dynatrace\n* Where to find OpenTelemetry data in Dynatrace\n\n#### 1.1.3 Keptn: Providing Cloud Native Application Lifecycle Observability\n\nTo learn more about Keptn please visit [Keptn Website](https://lifecycle.keptn.sh/)\n\nIn our IDP we are using Keptn to provide observability into the deployment lifecycle of our cloud native custom applications. Keptn's Lifecycle Operator can be enabled per k8s namespace via a simple annotation:\n```\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: \"your-namespace\"\n  annotations:\n    keptn.sh/lifecycle-toolkit: \"enabled\"\n```\n\nOnce enabled, it automatically created OpenTelemetry traces to trace the deployment of all application workloads. Keptn also emits Prometheus metrics that are also sent to OpenTelemetry.\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/platform_overview_otel_keptn.png)\n\nThe benefit of having Keptn is that we automatically get a base set of the DORA metrics (deployment frequency, deployment time, deployment failure rate) as well as distributed traces to troubleshoot failed or long running deployments\n\nWe can observe Keptn created data either in the **Dynatrace Distributed Traces app**, by viewing the Keptn metrics in custom dashboards or by looking at the Lifecycle Operator Service!\n\nWhat you should have learned:\n* What Keptn does and which data it provides\n* How to enable Keptn on a namespace level\n\n---\n\n### 1.2 ArgoCD: Our GitOps tool to synchronize our deployment configuration to K8s\n\nWant to learn more about ArgoCD? [Check out the ArgoCD Website](https://argoproj.github.io/cd/)\n\nIn our IDP, ArgoCD on the one hand is used to deploy the core platform components: Backstage, GitLab, Argo Rollouts, OpenTelemetry, Keptn, Dynatrace ...\nOn the other hand ArgoCD also deploys any custom application repository on our GitLab instance that follows a certain naming schema (those repositories will later be created through Backstage).\n\nLets start with exploring ArgoCD by navigating to our ArgoCD UI. Please login with the credentials given and then follow the guidance of your instructor:\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/argocd_overview.png)\n\nWhat you should have learned:\n* How to access ArgoCD\n* How to find specific Argo applications\n* How to detect the status of an application\n* How to read the deployed artifacts of an application\n\n---\n\n### 1.3 GitLab: Our Configuration Source of Truth in Git!\n\nWant to learn more about GitLab? [Check out their GitLab website](https://about.gitlab.com/)\n\nWhile our Core IDP components was created from configuration files that are hosted on a public GitHub repository our IDP itself is hosting a GitLab instance that will be used manage all custom applications that we will deploy later on! GitLab has many more features - in our IDP we are only using it for Git-based Version Control!\n\nLets start with exploring our GitLab instance by navigating to the GitLab UI. Login and then follow the instructor!\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/gitlab_overview.png)\n\nWhat you should have learned:\n* How to access GitLab\n* What the template repositories are\n* How user application repositories look like\n\n### 1.4 Backstage: Our Developer Portal, Our Notification Center!\n\nWant to learn more about Backstage? [Check out the Backstage website](https://backstage.io/)\n\nIn our IDP, Backstage is used as a Software Catalog as well as our self-service portal to create new applications from templates. Additionally to that we also extended Backstage to provide a simple chat/notification feature which allows us to send messages back to our teams (this is due to the lack of a shared Slack, MS Teams or other chat solutions)!\n\nLets start with exploring Backstage by navigating to the Backstage UI, then follow the guidance of your instructor:\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/backstage_overview.png)\n\nWhat you should have learned:\n* How to access Backstage\n* How to browse the Software Catalog\n* Where to create new software components (will need this later)\n* Where to find notifications\n\n---"},{"id":"fa45dd17-6001-4b5a-b095-10a6da3b13d8","type":"markdown","markdown":"## YOUR NOTES GO HERE!!"},{"id":"599f6957-dcb2-45ae-a799-dfd8ef40be60","type":"markdown","markdown":"### Hands-On 2: Create a new Service, Deploy it, Explore with Dynatrace\n\nNow that we are familiar with the core components of our IDP we are ready to use it to \n1. **ONBOARD** a new service via Backstage\n2. **DEPLOY** the new GitLab repository by ArgoCD\n3. **OBSERVE** the deployment by Dynatrace\n4. **NOTIFY** about the status by Dynatrace Workflows\n\nThe following animation shows what we are planning to do in this Hands-On:\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_animation_animated.gif)\n\n#### 2.1: Onboarding a new service through Backstage\n\nWe start in Backstage and walk through the **Create a New Component** workflow. \n\n**TEAM IDENTIFIER: Use your unique training attendee number, e.g: 08,09,10,11, ...**\n\nAs we walk through the workflow please use your unique team identifier. \n\n**For example:** if your attendee ID is 13 then you would use the following values on the team's details page:\n* **ID:** team13\n* **Name:** Team 13\n* **Email:** team13@somedomain.com\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_21_createinbackstage.png)\n\nWhat you should have learned is:\n* How to create a new service in Backstage based on a Template\n* How to find the created resources\n\n---\n\n#### 2.2: Lets explore the GitLab repository that was created\n\nNow lets explore the GitLab repository a bit closer. There are a couple of interesting things\n\n**1: NAME of the Repository**\n\nThe name of the repository ends in `-cd`. This is important as we have configured ArgoCD through a so called **ApplicationSet** to automatically watch out for GitLab repositories that end with `-cd`\n\n**2: ARGOCD folder with deployment CRDs**\n\nThis folder contains all CRDs (Custom Resource Definitions) that ArgoCD will deploy/synchronize with K8s. To have a closer look:\n* **CRDs:** for namespace (enables Keptn), ingress (exposes our service to the internet), rollout (Blue/Green Definition), RoleBinding for Dynatrace Monitoring and the Service Definition \n* **ArgoCD Workflow:** which pushes Dynatrace Observability as Code via Monaco\n* **ArgoCD Webhooks:** which push Lifecycle Events to Dynatrace for PreSync, Sync, PostSync and SyncFail\n\n**3: MONACO folder with Dynatrace Configuration as Code**\n\nThis folder contains Monaco definitions for SLOs, Ownership and Synthetic Tests. This could be replaced with other Config As Code tools such as Terraform, Ansible, Crossplane (support for Crossplane is currently in the works)\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_22_explorerepo_1.png)\n\n---\n\nArgoCD in the meantime has started to synchronize this new repository on GitLab with K8s:\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_22_explore_argo_1.png)\n\n---\n\n#### 2.3 How we made Dynatrace Release Aware!\n\nThe GitLab repository contains a lot of pre-populated meta data in the different CRDs. This meta data includes\n* Version, e.g: 1.0.2\n* Stage, e.g: pre-prod\n* Application, e.g: simplenodetest-team02\n* Owner, e.g: team02\n\nDynatrace automatically extracts this metadata as part of our [Version detection stragety](https://docs.dynatrace.com/docs/platform-modules/automations/release-monitoring/version-detection-strategies) as well as for [Entity ownership](https://docs.dynatrace.com/docs/manage/ownership/best-practices)\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_22_releaseawareness_1.png)\n\n---\n\n#### 2.4 Owners, SLOs and Synthetics through Observability as Code\n\nRight now we have Dynatrace automatically detect newly deployed services. Dynatrace also has some meta data such as release version, stage or team identifier of the owner. What we are missing however are some additional observability configuration such as\n1. What's the email of teamXX?\n2. How to validate the system is available?\n3. Are we meeting our SLOs?\n\nFor this we can use Dynatrace Ownership, Dynatrace Synthetics and Dynatrace SLOs. And instead of manually configuring it we can fully automate the configuration through **Observability as Code**. This can be done by calling the Dynatrace API or using tools such as Terraform, Ansible, Crossplane or Monaco. Our IDP setup uses Monaco which gets executed through an Argo Workflow as a PreSync action. Lets have a quick look at the configuration in GitLab and how this configuration looks in Dynatrace:\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_24_configascode_1.png)\n\n#### Explore our App Yourself\n\nAs you have seen - we have Dynatrace Synthetic Tests that are testing our application. Its time to also browse to our app as it is exposed via an Ingress to the internet. There are several ways we can find the URL\n1. We can take it from the Dynatrace Synthetic Test\n2. We can see it in ArgoCD\n3. We can get it from the Ingress Definition in GitLab\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_24_exploreourapp_1.png)\n\n---\n\n#### 2.5 How we make Dynatrace Lifecycle Event Aware!\n\nThere are many lifecycle stages that an artifact goes through: Build, Prepare, Deploy, Test, Validate, Release, Operate, Retire ...\n\nAt Dynatrace we are working on standardizing those lifecycle events and define semantics behind the meta data which will allow future Dynatrace Apps that are being built to provide better out-of-the-box features.\n\nAs of today we are suggesting that CI/CD tools use our BizEvents ingest API to make Dynatrace aware of a Lifecycle event. Alternatively we could also use the Events APIv2. In our IDP we are using BizEvents that are being sent from ArgoCD as part of a PreSync, Sync, PostSync and SyncFail Webhook. Those events are then triggering the `Dynatrace Lifecycle Workflow` which does the following:\n1. (for any event) Sends a Notification to the Backstage Notification Page\n2. (for sync finished) Waits until Dynatrace sees the PGI with all metadata\n3. (for sync finished) Creates Classic Deployment Events and a Deployment Validated Lifecycle Event\n4. (for sync finished) Sends a Notification to the Backstage Notification Page\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_22_lifecycleevents_1.png)\n\nBesides the BizEvents we can also use other events and ways to trigger events:\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_22_lifecycleevents_2.png)\n\nLet's also have a closer look at the Workflow itself. You can view it by opening the Workflow App and Opening the `Lifecycle Event Workflow`\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson2_25_understandworkflow_1.png)\n\n---\n\n#### 2.6 Lets explore all our Lifecycle Events so far!\n\nWith the current setup we should get 4 different Lifecycle Events:\n* sync.prepare\n* sync.started\n* sync.finished\n* deployment.validated\n\nThe easiest to query this information is by executing a DQL to get us exactly that data!\n\nIn the following DQL Query put in your team name and run the query. It will give you a table of all events.\n\nAs additional tasks you can `filter` or `summarize` on `event.provider` as well as `event.type`"},{"id":"002cd901-1176-4e44-b6d4-b70e905b0be7","type":"dql","title":"Query all Lifecycle Events for a certain team","showTitle":true,"state":{"input":{"value":"fetch bizevents\n| filter contains(owner, \"team02\")","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-12-11T13:09:55.231Z"},"to":{"type":"expression","normalized":"now","date":"2023-12-12T13:09:55.231Z"}}}},"visualization":"recordView","state":"success","davis":{"includeLogs":true,"davisVisualization":{"isAvailable":true}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"app_name","categoryAxisLabel":"app_name","valueAxis":"syncFinishedTimestamp","valueAxisLabel":"syncFinishedTimestamp"},"fieldMapping":{"timestamp":"timestamp","fields":["app_name"],"values":["syncFinishedTimestamp"]}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"timestamp":"2023-12-12T10:31:18.855000000+01:00","app_name":"simplenodeservice-team02","argocd":"https://argo.dtulab681833553.dynatrace.training/applications/argocd/simplenodeservice-team02-preprod-cd","event.id":"b44c4b40-172e-442e-bc24-c2c3604d39a7","event.kind":"BIZ_EVENT","event.provider":"argocd","event.type":"sync.prepare","git":"https://gitlab.dtulab681833553.dynatrace.training/group1/simplenodeservice-team02-preprod-cd","owner":"team02","proj_name":"simplenodeservice","result":"success","stage":"preprod"},{"timestamp":"2023-12-12T10:33:23.558000000+01:00","app_name":"simplenodeservice-team02","argocd":"https://argo.dtulab681833553.dynatrace.training/applications/argocd/simplenodeservice-team02-preprod-cd","entityId":"PROCESS_GROUP-A35E1D45251E21C6","event.id":"2d00a43e-8b06-43c0-8f6b-b03cc2d85663","event.kind":"BIZ_EVENT","event.provider":"Lifecycle Events Workflow","event.type":"deployment.validated","git":"https://gitlab.dtulab681833553.dynatrace.training/group1/simplenodeservice-team02-preprod-cd","owner":"team02","status":"succeeded","syncFinishedEventId":"e9ad3861-8fd5-45ca-809d-c2308f644c31","syncFinishedTimestamp":1702373595732000000},{"timestamp":"2023-12-12T10:33:15.732000000+01:00","app_name":"simplenodeservice-team02","argocd":"https://argo.dtulab681833553.dynatrace.training/applications/argocd/simplenodeservice-team02-preprod-cd","event.id":"e9ad3861-8fd5-45ca-809d-c2308f644c31","event.kind":"BIZ_EVENT","event.provider":"argocd","event.type":"sync.finished","git":"https://gitlab.dtulab681833553.dynatrace.training/group1/simplenodeservice-team02-preprod-cd","owner":"team02","proj_name":"simplenodeservice","result":"success","stage":"preprod"},{"timestamp":"2023-12-12T10:31:27.953000000+01:00","app_name":"simplenodeservice-team02","argocd":"https://argo.dtulab681833553.dynatrace.training/applications/argocd/simplenodeservice-team02-preprod-cd","event.id":"ec6dd581-e16f-44e7-a86a-94d9a18c434e","event.kind":"BIZ_EVENT","event.provider":"argocd","event.type":"sync.started","git":"https://gitlab.dtulab681833553.dynatrace.training/group1/simplenodeservice-team02-preprod-cd","owner":"team02","proj_name":"simplenodeservice","result":"success","stage":"preprod"},{"timestamp":"2023-12-11T18:43:29.139000000+01:00","app_name":"simplenodeservice-team02","argocd":"https://argo.dtulab681833553.dynatrace.training/applications/argocd/simplenodeservice-team02-preprod-cd","event.id":"b4ec5175-f4aa-4780-bc10-ca106c06dc91","event.kind":"BIZ_EVENT","event.provider":"argocd","event.type":"sync.prepare","git":"https://gitlab.dtulab681833553.dynatrace.training/group1/simplenodeservice-team02-preprod-cd","owner":"team02","proj_name":"simplenodeservice","result":"success","stage":"preprod"},{"timestamp":"2023-12-11T18:45:45.972000000+01:00","app_name":"simplenodeservice-team02","argocd":"https://argo.dtulab681833553.dynatrace.training/applications/argocd/simplenodeservice-team02-preprod-cd","entityId":"PROCESS_GROUP-A35E1D45251E21C6","event.id":"71d3234d-718d-4c20-86cb-73fff277b804","event.kind":"BIZ_EVENT","event.provider":"Lifecycle Events Workflow","event.type":"deployment.validated","git":"https://gitlab.dtulab681833553.dynatrace.training/group1/simplenodeservice-team02-preprod-cd","owner":"team02","status":"succeeded","syncFinishedEventId":"dcb846aa-7fb3-466e-a445-c0332cc834e6","syncFinishedTimestamp":1702316675716000000},{"timestamp":"2023-12-11T18:44:35.716000000+01:00","app_name":"simplenodeservice-team02","argocd":"https://argo.dtulab681833553.dynatrace.training/applications/argocd/simplenodeservice-team02-preprod-cd","event.id":"dcb846aa-7fb3-466e-a445-c0332cc834e6","event.kind":"BIZ_EVENT","event.provider":"argocd","event.type":"sync.finished","git":"https://gitlab.dtulab681833553.dynatrace.training/group1/simplenodeservice-team02-preprod-cd","owner":"team02","proj_name":"simplenodeservice","result":"success","stage":"preprod"},{"timestamp":"2023-12-11T18:43:39.279000000+01:00","app_name":"simplenodeservice-team02","argocd":"https://argo.dtulab681833553.dynatrace.training/applications/argocd/simplenodeservice-team02-preprod-cd","event.id":"08a1798e-8ac1-44fa-8c2f-3474d671c556","event.kind":"BIZ_EVENT","event.provider":"argocd","event.type":"sync.started","git":"https://gitlab.dtulab681833553.dynatrace.training/group1/simplenodeservice-team02-preprod-cd","owner":"team02","proj_name":"simplenodeservice","result":"success","stage":"preprod"},{"timestamp":"2023-12-11T16:32:56.754000000+01:00","app_name":"simplenodeservice-team02-preprod","event.id":"7258be20-7054-4228-ae5f-ba3aa119714e","event.kind":"BIZ_EVENT","event.provider":"argocd","event.type":"sync.finished","owner":"team02","result":"failed"},{"timestamp":"2023-12-11T16:31:40.895000000+01:00","app_name":"simplenodeservice-team02-preprod","event.id":"8598b420-1d8b-47e3-9820-adc6656239a5","event.kind":"BIZ_EVENT","event.provider":"argocd","event.type":"sync.prepare","owner":"team02","result":"success"}],"metadata":{"grail":{"canonicalQuery":"fetch bizevents\n| filter contains(owner, \"team02\")","timezone":"Europe/Berlin","query":"fetch bizevents\n| filter contains(owner, \"team02\")","scannedRecords":37,"dqlVersion":"V1_0","scannedBytes":5320,"analysisTimeframe":{"start":"2023-12-11T13:11:12.949Z","end":"2023-12-12T13:11:12.949Z"},"locale":"","executionTimeMilliseconds":21,"notifications":[],"queryId":"cdfea0f9-648f-4706-95a6-4781ccaa31c7","sampled":false}},"types":[{"mappings":{"timestamp":{"type":"timestamp"},"app_name":{"type":"string"},"argocd":{"type":"string"},"event.id":{"type":"string"},"event.kind":{"type":"string"},"event.provider":{"type":"string"},"event.type":{"type":"string"},"git":{"type":"string"},"owner":{"type":"string"},"proj_name":{"type":"string"},"result":{"type":"string"},"stage":{"type":"string"}},"indexRange":[0,0]},{"mappings":{"timestamp":{"type":"timestamp"},"app_name":{"type":"string"},"argocd":{"type":"string"},"entityId":{"type":"string"},"event.id":{"type":"string"},"event.kind":{"type":"string"},"event.provider":{"type":"string"},"event.type":{"type":"string"},"git":{"type":"string"},"owner":{"type":"string"},"status":{"type":"string"},"syncFinishedEventId":{"type":"string"},"syncFinishedTimestamp":{"type":"double"}},"indexRange":[1,1]},{"mappings":{"timestamp":{"type":"timestamp"},"app_name":{"type":"string"},"argocd":{"type":"string"},"event.id":{"type":"string"},"event.kind":{"type":"string"},"event.provider":{"type":"string"},"event.type":{"type":"string"},"git":{"type":"string"},"owner":{"type":"string"},"proj_name":{"type":"string"},"result":{"type":"string"},"stage":{"type":"string"}},"indexRange":[2,4]},{"mappings":{"timestamp":{"type":"timestamp"},"app_name":{"type":"string"},"argocd":{"type":"string"},"entityId":{"type":"string"},"event.id":{"type":"string"},"event.kind":{"type":"string"},"event.provider":{"type":"string"},"event.type":{"type":"string"},"git":{"type":"string"},"owner":{"type":"string"},"status":{"type":"string"},"syncFinishedEventId":{"type":"string"},"syncFinishedTimestamp":{"type":"double"}},"indexRange":[5,5]},{"mappings":{"timestamp":{"type":"timestamp"},"app_name":{"type":"string"},"argocd":{"type":"string"},"event.id":{"type":"string"},"event.kind":{"type":"string"},"event.provider":{"type":"string"},"event.type":{"type":"string"},"git":{"type":"string"},"owner":{"type":"string"},"proj_name":{"type":"string"},"result":{"type":"string"},"stage":{"type":"string"}},"indexRange":[6,7]},{"mappings":{"timestamp":{"type":"timestamp"},"app_name":{"type":"string"},"event.id":{"type":"string"},"event.kind":{"type":"string"},"event.provider":{"type":"string"},"event.type":{"type":"string"},"owner":{"type":"string"},"result":{"type":"string"}},"indexRange":[8,9]}]},"notifications":[],"dateTime":"2023-12-12T13:11:12.947Z","input":{"value":"fetch bizevents\n| filter contains(owner, \"team02\")","timeframe":{"from":"now-24h","to":"now","details":{"from":{"type":"expression","normalized":"now-24h","date":"2023-12-11T13:09:55.231Z"},"to":{"type":"expression","normalized":"now","date":"2023-12-12T13:09:55.231Z"}}}}}}},{"id":"74c85191-07d8-43c9-9106-23f5e4b6ebf5","type":"markdown","markdown":"## YOUR NOTES GO HERE!!"},{"id":"a769992a-1da9-41a6-9c8a-89b99c47eb59","type":"markdown","markdown":"### Hands-On 3: Setting up an SRG (Site Reliability Guardian)\n\nNow that we have our first version of our applications deployed we want to validate that the next time a new version gets deployed our applications are still healthy and running!\n\nFor this we will be doing three steps:\n1. Create a Site Reliability Guardian (SRG) to validate our key objectives of our service\n2. Trigger that SRG from a Workflow for a `deployment.validated` lifecycle event\n3. Send a notification message to our Backstage Notification Plugin\n\nHere is a quick overview of what we want to achieve:\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson3_srgoverview_animated.gif)\n\n--- \n\n#### 3.1 Create a Site Reliability Guardian (SRG) for our service\n\nTo learn more about the Site Reliability Guardian (SRG) also watch [Dynatrace App Spotlight: SRG](https://www.youtube.com/watch?v=s3KG4kn-ymY)\n\nAs indicated in the video, creating an SRG can start with picking an existing template or creating one from scratch. In our Hands-On we will create an SRG from scratch. Here are the steps:\n1. Open the SRG App and click on `+ Guardian`\n2. Select `create without template` and give it a good name\n3. Add one objective \n4. Specify `Availability` and choose the `Availability SLO` for your service\n5. `Create and Validate` \n6. Validate the result\n\nHere are those steps visually explained\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson3_31_createsrg_1.png)\n\n#### 3.2 Create a Workflow for the Guardian\n\nAs we have validated that the guardian works based on our current set of objectives its time to automate the execution. For this we can create a workflow straight from the Guardian App. What we need to adjust is \n1. The trigger of the workflow should be from a successful `deployment.validated` for our respective application\n2. Using the last 30 minutes as evaluation timeframe (NOT BEST PRACTICE - BUT GOOD FOR THE START)\n\nHere are those steps visually explained\n\nHere is the trigger filter for you to copy/paste (add your correct team name)\n```\nevent.type == \"deployment.validated\"\nand status == \"succeeded\"\nand owner == \"teamXX\"\n```\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson3_32_automate_srg_1.png)\n\n#### 3.3 Execute the Workflow and validate its working\n\nWe can manually trigger a workflow at any time. When clicking `Run` we will be prompted with a sample event that will be used to execute the workflow. As we have earlier queried the events that match our filter the event proposed will be one of our previous `deployment.validated` lifecycle events.\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson3_33_run_srg_workflow_1.png)\n\n#### 3.4 Extend Workflow with a Notification\n\nAs a last step we can extend the Workflow to also send the result of the Guardian to our Notification system. In *the real world* this could be Slack, EMail, creating a JIRA Ticket. In our case our Backstage Notification plugin will do.\n\nLets therefore add a new HTTP Request task as shown below in the image. Here the additional information you need for setting up this task:\n1. URL: `https://backstage.dtulabXXXXXXXXXXXX.dynatrace.training/api/notifications`\n2. Payload\n```\n{\n  \"message\": \"SRG Result for {{ event()[\"app_name\"] }}: {{ result(\"run_validation\").validation_status }}! See result: {{ result(\"run_validation\").validation_url }} \",\n  \"channel\": \"{{event()[\"owner\"] }}\",\n  \"origin\": \"Guardian Workflow\"\n}\n```\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson3_34_add_notifications_1.png)\n\n---\n\n### (Optional) Hands-On 3: Extending the Guardian with more objectives\n\nThe power of Dynatrace is that we have all relevant data in Grail which makes it usable for the Site Reliability Guardian (SRG)\nIn this optional Hands-On we can extend the guardian we just created with additional objectives such as\n1. Validate that there are no error logs\n2. Validate that response time is within a certain threshold\n3. Validate that there are no HTTP 5xx\n4. Validate that there are no security vulnerabilities\n5. Validate that memory and cpu usage is within expectations\n\n#### 3.5 Adding Error Log Objective\n\nWe can easily add a new objective to validate whether we have any error logs. Our application creates error logs when \n1. We `Invoke` passing a Server URL that is invalid, e.g: www.wrongdomain.abc\n2. We call the URL: `/api/causeerror`\n\nTo create such an objective we should first define and test a DQL query that gives us the number of error logs created by our app. Once we have it we can add this query as an objective and specify a threshold that should not be higher than 0.\n\nTo make it easier for you see the `Query Error Logs` DQL query below. Modify it by using your `team identifier`. Run it to make sure it works. Then update the Guardian!\n```\nfetch `logs`\n| filter contains(`k8s.pod.name`, \"team02\")\n| filter contains(content, \"Error\")\n| summarize errorCount=count()\n```"},{"id":"1ad33175-8105-43b5-8a91-1725f22b9334","type":"dql","title":"Query Error Logs","showTitle":true,"state":{"input":{"value":"fetch `logs`\n| filter contains(`k8s.pod.name`, \"team02\")\n| filter contains(content, \"Error\")\n| summarize errorCount=count()","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-12-13T09:26:06.391Z"},"to":{"type":"expression","normalized":"now","date":"2023-12-13T09:56:06.391Z"}}}},"visualization":"singleValue","state":"success","davis":{"includeLogs":true,"davisVisualization":{"isAvailable":true}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"connect","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"categoricalBarChartSettings":{"categoryAxis":"content","categoryAxisLabel":"content","valueAxis":"count","valueAxisLabel":"count"}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"lineWrapIds":[],"firstVisibleRowIndex":0,"columnWidths":{}}},"result":{"code":200,"value":{"records":[{"errorCount":"2"}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter contains(k8s.pod.name, \"team02\")\n| filter contains(content, \"Error\")\n| summarize count(), alias:errorCount","timezone":"Europe/Berlin","query":"fetch `logs`\n| filter contains(`k8s.pod.name`, \"team02\")\n| filter contains(content, \"Error\")\n| summarize errorCount=count()","scannedRecords":341220,"dqlVersion":"V1_0","scannedBytes":23173519,"analysisTimeframe":{"start":"2023-12-13T09:28:39.623Z","end":"2023-12-13T09:58:39.623Z"},"locale":"","executionTimeMilliseconds":25,"notifications":[],"queryId":"b4040856-5ab4-4135-a63c-fc09f9572890","sampled":false}},"types":[{"mappings":{"errorCount":{"type":"long"}},"indexRange":[0,0]}]},"notifications":[],"dateTime":"2023-12-13T09:58:39.622Z","input":{"value":"fetch `logs`\n| filter contains(`k8s.pod.name`, \"team02\")\n| filter contains(content, \"Error\")\n| summarize errorCount=count()","timeframe":{"from":"now-30m","to":"now","details":{"from":{"type":"expression","normalized":"now-30m","date":"2023-12-13T09:26:06.391Z"},"to":{"type":"expression","normalized":"now","date":"2023-12-13T09:56:06.391Z"}}}}}},"height":99},{"id":"83646435-f712-4aae-9eb4-59e9af18cb5c","type":"markdown","markdown":"## YOUR NOTES GO HERE!!"},{"id":"7d2ec1a6-b440-40d2-b7be-7650318e118e","type":"markdown","markdown":"### Hands-On 4: Deploy a new version of our app\n\nNow that we have extended our automation in our platform to automatically execute an additional workflow when a new deployment is successfully detected we can deploy a new version of the app. \n\nIn our tutorial we already have multiple versions of our application available. So far we have deployed version 1.0.2. We can now go ahead and deploy 2.0.2, 3.0.2 or 4.0.2.\n\nHow do we do this?\n1. Find our `rollout.yaml` in our GitLab repository\n2. Change the two version fields from the current version to the desired version\n3. Commit the changes and let the automation do the rest!\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson4_41_update_version_1.png)\n\n--- \n\nNow we can observe how ArgoCD is picking up that change, syncs it with K8s and with this triggers all the automation in Dynatrace.\n\nOur final result should be that we see all notifications in our Backstage Notification Plugin!\n\n![](https://raw.githubusercontent.com/dynatrace-perfclinics/platform-engineering-tutorial/main/images/handson4_41_update_version_2.png)\n"},{"id":"d8b10020-b85a-43fa-aec9-68a3007f1af9","type":"markdown","markdown":"## YOUR NOTES GO HERE!!"},{"id":"533ffe76-93ac-46d2-b716-ee6eccf41079","type":"markdown","markdown":"### Hands-On 5: Explore the Platform Observability Use Cases (WORK IN PROGRESS)\n\nWhile we have focused a lot about automating the observability of our deployed apps its now time to discuss how we can observe the platform components such as ArgoCD, GitLab, Backstage, OpenTelemetry, ...\n\nFor this we have a couple of dashboards & notebooks prepared that show how we can use observability signals (logs, metrics, traces ...) from those systems to provide platform engineering teams a good overview of the health of their platform.\n\n#### 5.1 Analyzing ArgoCD\n\nFollow the steps of the instructor and explore the provided notebooks and dashboards\n\n---\n\n#### 5.2 Analyzing GitLab\n\nFollow the steps of the instructor and explore the provided notebooks and dashboards\n\n---\n\n#### 5.3 Analyzing Backstage\n\nFollow the steps of the instructor and explore the provided notebooks and dashboards\n\n---\n\n#### 5.4 Analyzing Kubernetes\n\nFollow the steps of the instructor and explore the provided notebooks and dashboards\n"},{"id":"7ec8e573-acdc-4e4a-9f1c-072074e40fce","type":"markdown","markdown":"## YOUR NOTES GO HERE!!"}]}