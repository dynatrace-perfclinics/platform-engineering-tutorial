metadata:
  version: "1"
  dependencies:
    apps:
      - id: dynatrace.automations
        version: ^1.237.1
  inputs: []
workflow:
  title: Lifecycle Events Workflow
  tasks:
    get_global_vars:
      name: get_global_vars
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      input:
        script: >-
          export default async function ({ execution_id }) {

            /**
             * Setting Workflow-wide defaults that can be used by any task!
             */
            
            return {
              "environmentUrl" : globalThis.environmentUrl,
              "notificationEndpoint" : "https://backstage.dtulab707055379.dynatrace.training/api/notifications"
            }  
          }
      position:
        x: 0
        y: 1
      predecessors: []
    notify_backstage:
      name: notify_backstage
      description: Issue an HTTP request to any API
      action: dynatrace.automations:http-function
      input:
        url: '{{ result("get_global_vars")["notificationEndpoint"]}}'
        method: POST
        payload: >-
          {
            "message": "Detected {{ event()["event.type"] }} for {{event()["app_name"] }}",
            "channel": "{{event()["owner"] }}",
            "origin": "Dynatrace Workflow"
          }
      position:
        x: 1
        y: 2
      predecessors:
        - get_global_vars
      conditions:
        states:
          get_global_vars: OK
    send_dt_failed_events:
      name: send_dt_failed_events
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      input:
        script: >-
          // optional import of sdk modules

          import { execution } from '@dynatrace-sdk/automation-utils';


          export default async function ({ execution_id }) {
            // your code goes here
            // e.g. get the current execution
            const ex = await execution(execution_id);
            const eventContext = ex.event();

              // construct a "fake" buildID -> should come from the CI System
            const now = new Date();
            let hour = now.getHours()
            let minute = now.getMinutes();
            let day = now.getDate();
            let month = now.getMonth()
            var buildId = month + "." + day + "." + hour + "." + minute

            // Creates a BizEvent
            var bizEventDeploymentReady = {
              'git' : eventContext.git,
              'owner' : eventContext.owner,
              'argocd' : eventContext.argocd,
              'app_name' : eventContext.app_name,
              'stage' : eventContext.stage,
              'proj_name' : eventContext.proj_name,
              'syncFinishedTimestamp' : eventContext.timestamp,
              'syncFinishedEventId' : eventContext["event.id"],
              'event.type': 'deployment.validated',
              'status' : 'failed',
              'event.provider': 'Lifecycle Events Workflow',
              'timeframe.from': 'now-30m',
              'timeframe.to': 'now',   
              execution_context: {
                buildId: buildId,
                owner: eventContext.owner,
                stage: eventContext.stage,
                proj_name: eventContext.proj_name,
                app_name: eventContext.app_name,
                component_name: eventContext.app_name + "-" + eventContext.stage,      
                id: crypto.randomUUID().toString()
              } 
            }
            const resultBizEvent = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(bizEventDeploymentReady),
            });
            
            return { triggeredBy: ex.trigger };
          }
      position:
        x: -2
        y: 3
      predecessors:
        - run_javascript_validate_entity
      conditions:
        states:
          run_javascript_validate_entity: NOK
    send_dt_success_events:
      name: send_dt_success_events
      description: Sends a Dynatrace Deployment Event for this finished deployment
      action: dynatrace.automations:run-javascript
      input:
        script: >-
          // optional import of sdk modules

          import { execution } from '@dynatrace-sdk/automation-utils';


          export default async function ({ execution_id }) {
            const ex = await execution(execution_id);
            const eventContext = ex.event();
            const validateResult = await ex.result("run_javascript_validate_entity")

            // construct a "fake" buildID -> should come from the CI System
            const now = new Date();
            let hour = now.getHours()
            let minute = now.getMinutes();
            let day = now.getDate();
            let month = now.getMonth()
            var buildId = month + "." + day + "." + hour + "." + minute
            
            console.log(validateResult)
            
            // Creates a BizEvent
            var bizEventDeploymentReady = {
              'git' : eventContext.git,
              'owner' : eventContext.owner,
              'argocd' : eventContext.argocd,
              'app_name' : eventContext.app_name,
              'stage' : eventContext.stage,
              'proj_name' : eventContext.proj_name,
              'syncFinishedTimestamp' : eventContext.timestamp,
              'syncFinishedEventId' : eventContext["event.id"],
              'entityId' : validateResult.id,
              'event.type': 'deployment.validated',
              'status' : 'succeeded',    
              'event.provider': 'Lifecycle Events Workflow',
              execution_context: {
                buildId: buildId,
                owner: eventContext.owner,
                stage: eventContext.stage,
                proj_name: eventContext.proj_name,
                app_name: eventContext.app_name,
                component_name: eventContext.app_name + "-" + eventContext.stage,
                id: crypto.randomUUID().toString()
              }     
            }
            console.log(bizEventDeploymentReady)  
            const resultBizEvent = await fetch('/platform/classic/environment-api/v2/bizevents/ingest', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(bizEventDeploymentReady),
            });

            // Send a Deployment Event
            var deploymentEventV2 = {
              "eventType" : "CUSTOM_DEPLOYMENT",
              "title": `Deployment Validated: ${eventContext.app_name}`,
              "entitySelector": `type(PROCESS_GROUP_INSTANCE),tag([Kubernetes]app.kubernetes.io/part-of:${eventContext.app_name}),tag([Kubernetes]dynatrace-release-stage:${eventContext.stage})`,
              "properties": {
                "source" : "Dynatrace Argo Sync Validator",
                'git' : eventContext.git,
                'owner' : eventContext.owner,
                'argocd' : eventContext.argocd,
                'app_name' : eventContext.app_name,
                'stage' : eventContext.stage,
                'proj_name' : eventContext.proj_name,
                'syncFinishedTimestamp' : eventContext.timestamp,
                'syncFinishedEventId' : eventContext["event.id"],
                'buildId' : buildId
              }
            }
            const resultEvent = await fetch('/platform/classic/environment-api/v2/events/ingest', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(deploymentEventV2),
            });
            
            return { triggeredBy: ex.trigger };
          }
      position:
        x: 0
        y: 3
      predecessors:
        - run_javascript_validate_entity
      conditions:
        states:
          run_javascript_validate_entity: OK
    notify_backstage_dt_error:
      name: notify_backstage_dt_error
      description: Issue an HTTP request to any API
      action: dynatrace.automations:http-function
      input:
        url: '{{ result("get_global_vars")["notificationEndpoint"]}}'
        method: POST
        payload: >-
          {
            "message": "Dynatrace Observability FAILED for for {{event()["app_name"] }}",
            "channel": "{{event()["owner"] }}",
            "origin": "Dynatrace Workflow"
          }
      position:
        x: -1
        y: 3
      predecessors:
        - run_javascript_validate_entity
      conditions:
        states:
          run_javascript_validate_entity: NOK
    notify_backstage_dt_ready:
      name: notify_backstage_dt_ready
      description: Issue an HTTP request to any API
      action: dynatrace.automations:http-function
      input:
        url: '{{ result("get_global_vars")["notificationEndpoint"]}}'
        method: POST
        payload: >-
          {
            "message": "Dynatrace Observability Ready for service {{ result("run_javascript_validate_entity")["entity.name"] }}: {{ result("get_global_vars")["environmentUrl"]}}ui/apps/dynatrace.classic.technologies/#processgroupdetails;id={{ result("run_javascript_validate_entity")["id"] }} ",
            "channel": "{{event()["owner"] }}",
            "origin": "Dynatrace Workflow"
          }
      position:
        x: 1
        y: 3
      predecessors:
        - run_javascript_validate_entity
      conditions:
        states:
          run_javascript_validate_entity: OK
    run_javascript_validate_entity:
      name: run_javascript_validate_entity
      description: Build a custom task running js Code
      action: dynatrace.automations:run-javascript
      input:
        script: >-
          /*

          * This function will fetch the EntityID of the Process Group that has the release, product, stage and ownership information

          *

          * Here is a reference sync.finished event and all the metadata

          {
            "timestamp": "2023-12-01T06:50:56.376000000Z",
            "app_name": "simplenodeservice-team46",  // thats the product
            "argocd": "https://argo.xxxxx",
            "event.id": "1b81bbde-07ca-4dd2-8c03-482611c6fd7a",
            "event.kind": "BIZ_EVENT",
            "event.provider": "argocd",
            "event.type": "sync.finished",
            "git": "https://gitlab.xxxx",
            "owner": "team46", // thats owner
            "proj_name": "simplenodeservice",
            "result": "success",
            "stage": "preprod"  // thats stage
          }

          */

          import { queryExecutionClient } from '@dynatrace-sdk/client-query';

          import { execution } from '@dynatrace-sdk/automation-utils';


          export default async function ({ execution_id }) {
            const ex = await execution(execution_id);
            const eventContext = ex.event();
            const timeout = 10;

            console.log(`Query entities for owner ${eventContext.owner}`)
            const query = `fetch dt.entity.process_group
              | parse toString(tags), """LD '[Kubernetes]dt.owner:' LD:owner ( '", ' | '"]')"""
              | parse toString(tags), """LD '[Environment]DT_RELEASE_VERSION:' LD:version ( '", ' | '"]')"""
              | parse toString(tags), """LD '[Environment]DT_RELEASE_PRODUCT:' LD:product ( '", ' | '"]')"""
              | parse toString(tags), """LD '[Environment]DT_RELEASE_STAGE:' LD:stage ( '", ' | '"]')"""
              | filter contains(product,"${eventContext.app_name}") 
              | filter contains(stage,"${eventContext.stage}")`;

            console.log(query);

            // Query entities that have matching team name
            const response = await queryExecutionClient.queryExecute({ body: { query, requestTimeoutMilliseconds: timeout * 1000, fetchTimeoutSeconds: timeout  } });

            // if no results returned throw error
            if(response.result.records == null || response.result.records.length == 0) {
              throw new Error(`No Entity returned yet with ${eventContext.owner}`)
            }

            // otherwise return result
            return response.result.records[0]
          }
      position:
        x: 0
        y: 2
      predecessors:
        - get_global_vars
      conditions:
        states:
          get_global_vars: OK
        custom: '{{ event()["event.type"] == "sync.finished" }}'
        else: STOP
      retry:
        count: 10
        delay: 60
        failedLoopIterationsOnly: true
  description: This workflow sends notifications back to ArgoCD Notifications
    Plugin when a new BizEvent is received from Argo
  trigger:
    eventTrigger:
      filterQuery: event.provider == "argocd"
      isActive: true
      uniqueExpression: null
      triggerConfiguration:
        type: event
        value:
          query: event.provider == "argocd"
          eventType: bizevents
  schemaVersion: 3
